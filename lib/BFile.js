// Generated by CoffeeScript 1.4.0
(function() {
  var BFile, fs, moment, path;

  fs = require('fs-extra');

  path = require('path');

  moment = require('moment');

  /*
  BFile
  */


  BFile = (function() {

    function BFile(pwd, encoding) {
      this.pwd = pwd;
      this.encoding = encoding;
    }

    BFile.prototype._slice = Array.prototype.slice;

    BFile.toArray = function(argument, from, to) {
      return this._slice.call(argument, from, to);
    };

    BFile.prototype.getState = function() {
      return fs.statSync(this.pwd);
    };

    BFile.prototype.isFile = function() {
      return this.getState().isFile();
    };

    BFile.prototype.isDirectory = function() {
      return this.getState().isDirectory();
    };

    BFile.prototype.exists = function() {
      return fs.existsSync(this.pwd);
    };

    BFile.prototype.create = function(isDirectory) {
      if (this.exists()) {
        return this;
      } else {
        if (isDirectory) {
          return this.constructor.mkdir(this.pwd);
        } else {
          return this.constructor.touch(this.pwd, this.encoding);
        }
      }
    };

    BFile.prototype.getFileName = function() {
      return this.pwd.replace(path.dirname(this.pwd) + '/', '');
    };

    BFile.prototype.getBaseName = function() {
      var fileName, lastPoint;
      fileName = this.getFileName();
      lastPoint = fileName.lastIndexOf('.');
      lastPoint = lastPoint === -1 ? 0 : lastPoint;
      return fileName.substring(0, lastPoint);
    };

    BFile.prototype.getExtension = function() {
      var fileName, lastPoint;
      fileName = this.getFileName();
      lastPoint = fileName.lastIndexOf('.');
      lastPoint = lastPoint === -1 ? 0 : lastPoint;
      return fileName.slice(lastPoint);
    };

    BFile.prototype.getCTime = function(format) {
      var stat;
      if (format == null) {
        format = 'YYYY-MM-DD';
      }
      stat = fs.statSync(filePath);
      return moment(stat.ctime).format(format);
    };

    BFile.prototype.lastModified = function(format) {
      var stat;
      if (format == null) {
        format = 'YYYY-MM-DD';
      }
      stat = fs.statSync(filePath);
      return moment(stat.mtime).format(format);
    };

    BFile.prototype.getChildren = function(recursive) {
      return this.constructor.getChildren(recursive);
    };

    BFile.prototype.getChildrenDir = function(recursive) {
      return this.constructor.getChildrenDir(recursive);
    };

    BFile.prototype.write = function(content) {
      this.create();
      fs.writeFileSync(this.pwd, content, this.encoding);
      return this;
    };

    BFile.prototype.read = function() {
      this.create();
      return fs.readFileSync(this.pwd, this.encoding);
    };

    BFile.prototype.readByJSON = function() {
      var content;
      content = this.read();
      return JSON.parse(content);
    };

    BFile.prototype.append = function(content) {
      this.create();
      fs.appendFileSync(this.pwd, content, this.encoding);
      return this;
    };

    BFile.prototype.copyTo = function(dest) {
      var content;
      content = this.read();
      new BFile(dest).write(content);
      return this;
    };

    return BFile;

  })();

  BFile.getChildrenDir = function(recursive) {
    var file, filePaths, re, _fn, _i, _len;
    filePaths = this.getChildren(recursive);
    re = [];
    _fn = function(file) {
      if (fs.statSync(file).isDirectory()) {
        return re.push(file);
      }
    };
    for (_i = 0, _len = filePaths.length; _i < _len; _i++) {
      file = filePaths[_i];
      _fn(file);
    }
    return re;
  };

  BFile.getChildren = function(recursive) {
    var filePaths, self, src,
      _this = this;
    src = this.pwd;
    if (!fs.existsSync(src)) {
      return [];
    }
    self = this;
    filePaths = [];
    fs.readdirSync(src).forEach(function(filename, i) {
      filename = path.resolve(src, filename);
      if (fs.statSync(filename).isDirectory()) {
        if (recursive) {
          return filePaths = filePaths.concat(self.getChildren(recursive));
        } else {
          return filePaths.push(filename);
        }
      } else {
        return filePaths.push(filename);
      }
    });
    return filePaths;
  };

  BFile.mkdir = function(dest) {
    var parent;
    dest = path.resolve(dest);
    parent = path.dirname(dest);
    if (fs.existsSync(parent)) {
      return fs.mkdirSync(dest);
    } else {
      this.mkdir(parent);
      return fs.mkdirSync(dest);
    }
  };

  BFile.touch = function(dest, encoding) {
    var parent;
    dest = path.resolve(dest);
    parent = path.dirname(dest);
    if (fs.existsSync(parent)) {
      return fs.writeFileSync(dest, '', encoding);
    } else {
      this.mkdir(parent);
      return fs.writeFileSync(dest, '', encoding);
    }
  };

  exports.File = BFile;

}).call(this);
