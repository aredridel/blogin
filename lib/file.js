// Generated by CoffeeScript 1.4.0
(function() {
  var copy, dir, fs, getFileName, marked, mkdir, moment, path, read, readJSON, write;

  fs = require('fs');

  path = require('path');

  moment = require('moment');

  marked = require('marked');

  marked.setOptions({
    gfm: true,
    pedantic: false,
    sanitize: false
  });

  mkdir = exports.mkdir = function(dest) {
    var parent;
    dest = path.resolve(dest);
    parent = path.dirname(dest);
    if (fs.existsSync(parent)) {
      return fs.mkdirSync(dest);
    } else {
      mkdir(parent);
      return fs.mkdirSync(dest);
    }
  };

  dir = exports.dir = function(src, notRecursive, onlyDir) {
    var filePaths,
      _this = this;
    if (!fs.existsSync(src)) {
      return [];
    }
    if (!fs.statSync(src).isDirectory()) {
      return [src];
    }
    filePaths = [];
    fs.readdirSync(src).forEach(function(filename, i) {
      filename = path.resolve(src, filename);
      if (fs.statSync(filename).isDirectory()) {
        if (!notRecursive) {
          return filePaths = filePaths.concat(dir(filename, notRecursive, onlyDir));
        } else {
          return filePaths.push(filename);
        }
      } else {
        if (!onlyDir) {
          return filePaths.push(filename);
        }
      }
    });
    return filePaths;
  };

  read = exports.read = function(src) {
    if (fs.existsSync(src)) {
      return fs.readFileSync(src, 'utf8');
    } else {
      return '';
    }
  };

  write = exports.write = function(src, content) {
    var parent;
    parent = path.dirname(src);
    if (!fs.existsSync(parent)) {
      mkdir(parent);
    }
    return fs.writeFileSync(src, content, 'utf8');
  };

  exports.writeIfNotExist = function(src, content) {
    if (!fs.existsSync(src)) {
      write(src, content);
      return true;
    } else {
      return false;
    }
  };

  copy = exports.copy = function(src, dest) {
    var content;
    content = read(src);
    return write(dest, content);
  };

  readJSON = exports.readJSON = function(src) {
    var content;
    content = read(src);
    return JSON.parse(content);
  };

  getFileName = exports.getFileName = function(filePath) {
    return filePath.replace(path.dirname(filePath) + '/', '');
  };

  exports.pathToTitle = function(filePath) {
    /*
    	fileName = getFileName(filePath).slice(0, -3)
    	fileName = fileName
    		.replace(/([^\\])\-/g, '$1 ')
    		.replace(/\\-/g, '-')
    	fileName.slice(0, 1).toUpperCase() + fileName.slice(1)
    */

    var content;
    content = read(filePath);
    return content.slice(0, content.indexOf('\n'));
  };

  exports.titleToPath = function(title) {
    var escapedWords, filename, words;
    if (typeof title === 'object') {
      words = title;
    } else {
      words = [title];
    }
    escapedWords = [];
    words.forEach(function(word, i) {
      return escapedWords[i] = word.replace(/\-/g, '\\$1');
    });
    filename = escapedWords.join('-').toLowerCase();
    if (filename.slice(-3) !== '.md') {
      return filename = filename + '.md';
    }
  };

  exports.pathToUrl = function(filePath, root) {
    return '/' + path.relative(root, filePath);
  };

  exports.getCTime = function(filePath, format) {
    var stat;
    stat = fs.statSync(filePath);
    format = format || 'YYYY-MM-DD';
    return moment(stat.ctime).format(format);
  };

  exports.getMTime = function(filePath, format) {
    var stat;
    stat = fs.statSync(filePath);
    format = format || 'YYYY-MM-DD';
    return moment(stat.mtime).format(format);
  };

  exports.mdToHtml = function(filePath) {
    if (filePath.slice(-3) === '.md') {
      filePath = filePath.slice(0, -3) + '.html';
    }
    return filePath;
  };

  exports.isMd = function(filePath) {
    return filePath.slice(-3) === '.md';
  };

  exports.readMdToHtml = function(filePath) {
    var file;
    return file = marked(read(filePath));
  };

  exports.sortByCreateTime = function(paths) {
    var _this = this;
    return paths.sort(function(a, b) {
      return _this.getCTime(a) < _this.getCTime(b);
    });
  };

}).call(this);
