// Generated by CoffeeScript 1.4.0
(function() {
  var clc, commandsDesc, commandsUsage, createSpace, parseArg, util;

  util = require('util');

  clc = require('cli-color');

  parseArg = require('./arg').parse;

  commandsDesc = {
    deploy: 'Deploy static files to git server, like github.',
    server: 'Start a server on http://localhost:3000 .',
    update: 'Generate the static files.',
    post: 'Create post, show post tree, delete post.',
    page: 'Create page, show page tree, delete page.',
    init: 'Init the blog directory.',
    help: 'Display help.',
    trash: 'Show trash tree, recovery deleted file.'
  };

  commandsUsage = {
    deploy: '',
    server: 'Start a server on http://localhost:3000 .',
    update: '[-q] [blog directory]\n\n[-q]                 Use quiet mod, do not print log.\n[blog directory]     If not set directory then use current directory.',
    post: '[-f] <postname>\n\n<postname> [optional] Post name also file name, can\'t be \'index\'\n-f         Force to rewrite exist file.\n\n`blogin post` to show post tree or delete post.',
    page: '[-f] <pagename>\n\n-f     Force to rewrite exist file.\n\n`blogin page` to show page tree or delete page.',
    init: '[blog directory]\n\n[blog directory]     If not set directory then use current directory.',
    trash: '\n\n`blogin trash` show trash tree, recovery deleted file.'
  };

  createSpace = function(command, maxLength) {
    var i, spaceLength, str;
    spaceLength = maxLength - command.length;
    str = '';
    i = 0;
    while (spaceLength > i) {
      str += ' ';
      i++;
    }
    return str;
  };

  module.exports = {
    help: function(args) {
      var arg, command, commandName, description, maxLength, pacage;
      arg = parseArg(args);
      if (args.length !== 0 && arg.req.length !== 0) {
        commandName = arg.req[0];
        if (commandsUsage[commandName]) {
          this.puts(commandName);
          return;
        }
      }
      pacage = require('../package.json');
      util.puts(pacage.name + ' is ' + pacage.description);
      util.puts('');
      maxLength = 1;
      for (command in commandsDesc) {
        if (command.length > maxLength) {
          maxLength = command.length;
        }
      }
      maxLength += 5;
      for (command in commandsDesc) {
        description = commandsDesc[command];
        util.print('   ' + clc.yellow(command) + createSpace(command, maxLength));
        util.puts(description);
      }
      return util.puts('');
    },
    puts: function(commandName) {
      return util.puts('Usage: blogin ' + commandName + ' ' + commandsUsage[commandName]);
    }
  };

}).call(this);
