// Generated by CoffeeScript 1.4.0
(function() {
  var MyUtil, deleteFile, dirnameMap, dirnameWithYearMap, file, listFile, moment, newFile, parseArg, usage, util;

  util = require('util');

  moment = require('moment');

  file = require('./file');

  usage = require('./usage');

  parseArg = require('./arg').parse;

  MyUtil = require('./MyUtil');

  dirnameWithYearMap = {
    post: './data/posts/{year}/',
    page: './data/pages/{year}/'
  };

  dirnameMap = {
    post: './data/posts',
    page: './data/pages'
  };

  module.exports = function(args) {
    var arg, filename, type;
    type = 'post';
    arg = parseArg(args);
    if (args.length === 0) {
      listFile(type);
      return;
    }
    if (arg.req.length === 0) {
      usage.puts(type);
      return;
    }
    filename = file.titleToPath(arg.req);
    if (filename === 'index.md') {
      usage.puts(type);
      return;
    }
    return newFile(arg, filename, type);
  };

  newFile = module.exports.newFile = function(arg, filename, type) {
    var content, dataFile, dirname, postTitle;
    postTitle = arg.req.join(' ');
    content = postTitle + '\n======\n';
    dirname = dirnameWithYearMap[type].replace('{year}', moment().format('YYYY'));
    dataFile = dirname + filename;
    if (~arg.opt.indexOf('f')) {
      file.write(dataFile, content);
      util.puts('Created at ' + dataFile);
      return MyUtil.addInfo(type, dataFile);
    } else {
      if (file.writeIfNotExist(dataFile, content)) {
        util.puts('Created at ' + dataFile);
        return MyUtil.addInfo(type, dataFile);
      } else {
        return util.puts('Fail to create, file "' + dataFile + '" was existed.\nUse [-f] option to rewrite the file.');
      }
    }
  };

  listFile = module.exports.listFile = function(type) {
    var dirname, filter, printTree, root, stdin, tip, updateCommandLine,
      _this = this;
    dirname = dirnameMap[type];
    filter = function(filename) {
      return file.isDir(filename) || file.isMd(filename);
    };
    root = file.tree(dirname, filter);
    if (root.notExists) {
      util.puts('Path "' + root.name + '" not existed.');
      return;
    }
    printTree = function(root, highlightLineNum) {
      var iterate, level;
      level = -1;
      iterate = function(node) {
        var child, i, indent, l, limit, symbol, _i, _len, _ref;
        level++;
        indent = '';
        i = 0;
        l = level * 4;
        limit = l - 3;
        while (i < l) {
          i++;
          if (i < limit) {
            symbol = ' ';
          }
          if (i === limit) {
            symbol = '|';
          }
          if (i > limit) {
            symbol = '-';
          }
          indent += symbol;
        }
        util.puts(indent + file.getFileName(node.name));
        if (node.children) {
          _ref = node.children;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            iterate(child);
          }
        }
        return level--;
      };
      return iterate(root);
    };
    tip = "====================================\nShortcut: \n    \"q\"  ==>  quit.\n    \"d\"  ==>  delete " + type + ".\n    \"j\"  ==>  selection up.\n    \"k\"  ==>  selection down.";
    updateCommandLine = function() {
      printTree(root);
      return util.puts(tip);
    };
    updateCommandLine();
    stdin = process.stdin;
    stdin.setRawMode(true);
    stdin.resume();
    stdin.setEncoding('utf8');
    stdin.on('data', function(key) {
      switch (key) {
        case 'q':
          return process.exit();
        case 'd':
          return util.print('delete');
        case 'j':
          return util.print('up');
        case 'k':
          return util.print('down');
      }
    });
    return stdin.on('end', function() {
      return process.stdout.write('end');
    });
  };

  deleteFile = module.exports.deleteFile = function(filename, type) {};

}).call(this);
