// Generated by CoffeeScript 1.4.0
(function() {
  var BFile, DataApi, PageBFile, PathApi, PostBFile;

  BFile = require('./BFile');

  PostBFile = require('./PostBFile');

  PageBFile = require('./PageBFile');

  PathApi = require('./PathApi');

  DataApi = {
    getPostList: function() {
      var fileList, items, postDir,
        _this = this;
      postDir = PathApi.getSrcFile('post');
      fileList = File.getChildren(postDir, true);
      items = [];
      fileList.forEach(function(filePath) {
        var pFile;
        pFile = new PostBFile(filePath);
        if (!(pFile.getExtension() === '.md')) {
          return;
        }
        return items.push({
          title: pFile.getTitle(),
          url: pFile.toUrl()
        });
      });
      return items;
    },
    getPageList: function() {
      var fileList, items, pageDir,
        _this = this;
      pageDir = PathApi.getSrcFile('page');
      fileList = File.getChildren(pageDir, true);
      items = [];
      fileList.forEach(function(filePath) {
        var pFile;
        pFile = new PageBFile(filePath);
        if (!(pFile.getExtension() === '.md')) {
          return;
        }
        return items.push({
          title: pFile.getTitle(),
          url: pFile.toUrl()
        });
      });
      return items;
    },
    getArchiveList: function() {
      var archiveDir, archiveList, items,
        _this = this;
      archiveDir = PathApi.getSrcFile('post');
      archiveList = File.getChildren(archiveDir);
      items = [];
      archiveList.forEach(function(filePath) {
        var file;
        file = new ArchiveBFile(filePath);
        return items.push({
          title: file.getFileName(),
          url: file.toUrl()
        });
      });
      return items;
    },
    getArchivePostList: function(archiveName) {
      var fileList, items, postDir,
        _this = this;
      postDir = path.resolve(PathApi.getSrcFile('post'), archiveName);
      fileList = File.getChildren(postDir, true);
      items = [];
      fileList.forEach(function(filePath) {
        if (!(new BFile(filePath).getExtension() === '.md')) {
          return;
        }
        return items.push({
          title: file.pathToTitle(filePath),
          url: PathApi.srcToUrl('post', filePath)
        });
      });
      return items;
    },
    getLocals: function(type, arg1) {
      var archiveName, keywords, locals;
      locals = {
        site: file.readJSON(path.resolve(projectDir, './blogin.json')),
        pageName: ''
      };
      switch (type) {
        case 'index':
          locals.items = this.getPostList();
          locals.archives = this.getArchiveList();
          locals.pages = this.getPageList();
          locals.metaKeywords = locals.site.keywords;
          locals.metaDescription = locals.site.description;
          break;
        case 'archive':
          archiveName = arg1;
          locals.pageName = archiveName;
          locals.items = this.getArchivePostList(archiveName);
          locals.metaKeywords = locals.site.keywords;
          locals.metaDescription = locals.site.description;
          break;
        case 'page':
          locals.pageName = arg1.title;
          locals.entry = arg1;
          locals.site.keywords = locals.site.keywords || '';
          keywords = locals.site.keywords.split(',');
          keywords.push(locals.pageName);
          locals.metaKeywords = keywords.join(',');
          locals.metaDescription = locals.pageName;
          break;
        case 'post':
          locals.pageName = arg1.title;
          locals.entry = arg1;
          locals.site.keywords = locals.site.keywords || '';
          keywords = locals.site.keywords.split(',');
          keywords.push(locals.pageName);
          locals.metaKeywords = keywords.join(',');
          locals.metaDescription = locals.pageName;
      }
      return locals;
    }
  };

}).call(this);
